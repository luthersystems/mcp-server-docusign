name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Create virtual environment
        run: uv venv --python ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev]"

      - name: Run ruff linter
        run: |
          uv run ruff check .

      - name: Run ruff formatter check
        run: |
          uv run ruff format --check .

      - name: Run unit tests with pytest
        run: |
          uv run pytest tests/ --ignore=tests/test_integration.py --cov=mcp_server_docusign --cov-report=xml --cov-report=term

      - name: Run integration tests (if secrets available)
        if: env.DS_INTEGRATION_KEY != ''
        env:
          DS_AUTH_BASE: ${{ secrets.DS_AUTH_BASE || 'https://account-d.docusign.com' }}
          DS_INTEGRATION_KEY: ${{ secrets.DS_INTEGRATION_KEY }}
          DS_USER_ID: ${{ secrets.DS_USER_ID }}
          DS_PRIVATE_KEY: ${{ secrets.DS_PRIVATE_KEY }}
          DS_OAUTH_SCOPE: signature impersonation
          DS_TOKEN_EXP_SECS: 3600
        run: |
          uv run pytest tests/test_integration.py -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.11

      - name: Create virtual environment
        run: uv venv --python 3.11

      - name: Build package
        run: |
          uv pip install build
          uv run python -m build

      - name: Check package
        run: |
          uv pip install twine
          uv run twine check dist/*

